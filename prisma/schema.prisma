// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator nextAdmin {
    provider              = "next-admin-generator-prisma"
  }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

//role: admin, owner-oboje settings, salesman-svoji lidovi,salesmenager-svima
//teer4321
//tenant->tenantsettings, role itd
//react-hook form

model Invitation {
  id        String   @id @default(uuid()) 
  email     String   @unique
  tenantId  String
  role      Role   
  token     String   @unique
  expiresAt DateTime 
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}
model Tenant {
  id            String   @id @default(uuid()) 
  name          String   @unique
  users         TenantAccount[]
  brands        Brand[]
  settings      TenantSettings[] 
  invitations Invitation[]
}

model User {
  id            String   @id @default(uuid()) 
  name          String
  lastName      String?
  password      String?
  email         String   @unique
  emailVerified Boolean @default(false)
  tenantAccount TenantAccount?
}

model TenantAccount{
  id            String   @id @default(uuid()) 
  role          Role
  tenant        Tenant @relation(fields: [tenantId], references: [id])
  tenantId      String @unique
  user          User @relation(fields: [userId], references: [id])
  userId        String @unique
}

enum Role {
  ADMIN
  OWNER
  SALESMAN
}//samo svoje lidove + ako je estemetar-salesman
//osoba koja posetikucu, vezuje se za lead
//admin visaak isto kao salesmenager, brisemomenager


model TenantSettings{
  id       String @id @default(uuid()) 
  tenantId String @unique  
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

model Brand{
  id            String   @id @default(uuid()) 
  name          String
  tenantId      String  
  tenant        Tenant @relation(fields: [tenantId], references: [id])
  settings      BrandSettings[]
  furnitureItems FurnitureItem[]
  leads         Lead[] 

}

model BrandSettings{
  id       String @id @default(uuid()) 
  brandId  String @unique  
  brand    Brand @relation(fields: [brandId], references: [id])
}

model VerificationToken {
  id          String   @id @default(uuid()) 
  identifier  String?  
  email       String?  
  token       String   @unique
  expires     DateTime

  @@unique([identifier, token])
}

model InventoryItem {
  id              String        @id @default(uuid())
  originId        String 
  origins         Origins          @relation(fields: [originId], references: [id])
  furnitureItemId Int
  furnitureItem   FurnitureItem @relation(fields: [furnitureItemId], references: [id])
  name            String?
  imageName       String?
  letters         String[] @default([])
  search          String?
  tags            String[]
  cuft            Int?
  lbs             Int? 
  roomId          Int?
  displayedRooms  Int[] @default([])
  packingNeeds   Json?
  link        String?
  notes    String?
  uploadedImages  String[] @default([])
  cameraImages    String[] @default([])
  groupingKey     String?
  count           Int @default(1)
  autoAdded       Boolean @default(false)
}

model FurnitureItem {
  id       Int      @id @default(autoincrement()) 
  name     String  
  imageName String  
  rooms    Int []  @default([]) 
  letters  String[] @default([])  
  cuft     Int?   
  lbs      Int?   
  search   String?
  tags     String[] @default([])
  packingType  String?
  packingQuantity Int?
  brandId String  
  brand   Brand  @relation(fields: [brandId], references: [id])
  inventoryItems InventoryItem[]
}
  

model Lead {
  id                    String   @id @default(uuid())
  brandId              String
  brand                Brand   @relation(fields: [brandId], references: [id])
  companyName           String
  jobNumber             Int? @unique
  customerName          String
  customerPhoneNumber   String
  customerEmail         String
  source                String?
  serviceType           String?
  fromZip               String?
  toZip                 String?
  moveDate              String?
  assignSalesRep        Boolean? @default(false)
  salesName             String?
  creationDateTime      DateTime @default(now())
  estimator             String?
  surveyDate            String?
  surveyTime            String?
  leadStatus            String?
  leadActivity          String?
  nextAction            String?
  isNew                 Boolean? @default(true)
  lastUpdated           DateTime?
  inventoryOption       String?
  addStorage            Boolean? @default(false)
  storageItems          String?
  deliveryDate          String?
  etaRequest            String?
  timePromised          Boolean?
  arrivalTime           String?
  activeDay             String? @default("moving")
  hasPackingDay         Boolean? @default(false)
  rateType              String?
  numTrucks             Int?
  numMovers             Int?
  hourlyRate            Int?
  volume                Int?
  weight                Int?
  pricePerCuft          Float?
  pricePerLbs           Float?
  travelTime            String?
  movingMin             String?
  minimumCuft           Float?
  minimumLbs            Int?
  pickupWindow          String?
  earliestDeliveryDate  String?
  deliveryWindow        String?
  minHours              String?
  maxHours              String?
  numPackers            Int?
  packingHourlyRate     Int?
  packingTravelTime     String?
  packingMinimum        String?
  packingMinHours       String?
  packingMaxHours       String?
  hasInvoice            Boolean? @default(false)
  typeOfQuote           String?
  estimateQuote            Float?
  estimateFuelSurcharge       Float?
  estimateValuation           Float?
  estimatePacking             Float?
  estimateAdditionalServices  Float?
  estimateDiscount            Float?
  estimateGrandTotal       Float?
  estimatePayment             Float?
  estimateDeposit             Float?
  estimateBalanceDue       Float?
  invoiceQuote            Float?
  invoiceFuelSurcharge       Float?
  invoiceValuation           Float?
  invoicePacking             Float?
  invoiceAdditionalServices  Float?
  invoiceDiscount            Float?
  invoiceGrandTotal       Float?
  invoicePayment             Float?
  invoiceDeposit             Float?
  invoiceBalanceDue       Float?
  origins       Origins[]
  destinations  Destinations[]
}


enum Events {
  LEAD_STATUS_CHANGED
  LEAD_ACTIVITY_CHANGED
  NEXT_ACTION_CHANGED
}

model Event {
  id           String  @id @default(uuid())
  type         Events
  data         Json
  created_at   DateTime @default(now())
}


model Origins {
  id                      String   @id @default(uuid())
  leadId                  String
  lead                   Lead     @relation(fields: [leadId], references: [id])
  displayedRooms        Int[]   @default([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])
  itemsByRoom Json? @default("{}")
  address                String?
  apt                    String?
  city                   String?
  state                  String?
  zipCode                String?
  typeOfPlace            String?
  moveSize               String?
  howManyStories         String?
  features               String[]
  furnishingStyle        String?
  needsCOI               Boolean?
  biggestTruckAccess     String?
  shuttleTruckRequired   Boolean?
  parkingAccess          String?
  distanceDoorTruck      String?
  howManySteps           String?
  terrainDoorTruck       String?
  elevatorAtStop         Boolean?
  elevatorExclusive      Boolean?
  elevatorFloors         String?
  elevatorSize           String?
  whatsMoving            String?
  packingOption          String?
  itemsToBeTakenApart    Boolean?
  hoistItems             Boolean?
  craneNeeded            Boolean?
  blanketsOption         String?
  additionalServices     String[]
  timeRestriction        Boolean?
  timeRestrictionOption  String?
  timeRestrictionType    String?
  timeRestrictionStartTime String?
  timeRestrictionEndTime String?
  isActive               Boolean?
  inventoryItems        InventoryItem[]
}

model Destinations {
  id                      String   @id @default(uuid())
  leadId                  String
  lead                   Lead     @relation(fields: [leadId], references: [id])
  address                String?
  apt                    String?
  city                   String?
  state                  String?
  zipCode                String?
  typeOfPlace            String?
  moveSize               String?
  howManyStories         String?
  features               String[]
  furnishingStyle        String?
  needsCOI               Boolean?
  biggestTruckAccess     String?
  shuttleTruckRequired   Boolean?
  parkingAccess          String?
  distanceDoorTruck      String?
  howManySteps           String?
  terrainDoorTruck       String?
  elevatorAtStop         Boolean?
  elevatorExclusive      Boolean?
  elevatorFloors         String?
  elevatorSize           String?
  whatsMoving            String?
  unpackingOption          String?
  itemsToBeAssembled    Boolean?
  hoistItems             Boolean?
  craneNeeded            Boolean?
  blanketsOption         String?
  additionalServices     String[]
  postStorage            Boolean?
  timeRestriction        Boolean?
  timeRestrictionOption  String?
  timeRestrictionType    String?
  timeRestrictionStartTime String?
  timeRestrictionEndTime String?
  isActive               Boolean?
}





