// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator nextAdmin {
    provider              = "next-admin-generator-prisma"
  }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//role: admin, owner-oboje settings, salesman-svoji lidovi,salesmenager-svima
//teer4321
//tenant->tenantsettings, role itd

model Invitation {
  id        String   @id @default(uuid()) 
  email     String   @unique
  tenantId  String
  role      Role   
  token     String   @unique
  expiresAt DateTime 
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}
model Tenant {
  id            String   @id @default(uuid()) 
  name          String   @unique
  users         TenantAccount[]
  brands        Brand[]
  settings      TenantSettings[] 
  invitations Invitation[]
}

model User {
  id            String   @id @default(uuid()) 
  name          String
  lastName      String?
  password      String?
  email         String   @unique
  emailVerified Boolean @default(false)
  tenantAccount TenantAccount?
}

model TenantAccount{
  id            String   @id @default(uuid()) 
  role          Role
  tenant        Tenant @relation(fields: [tenantId], references: [id])
  tenantId      String @unique
  user          User @relation(fields: [userId], references: [id])
  userId        String @unique
}

enum Role {
  ADMIN
  OWNER
  SALESMAN
  SALESMANAGER
}//samo svoje lidove + ako je estemetar-salesman
//osoba koja posetikucu, vezuje se za lead
//admin visaak isto kao salesmenager, brisemomenager


model TenantSettings{
  id       String @id @default(uuid()) 
  tenantId String @unique  
  tenant   Tenant @relation(fields: [tenantId], references: [id])
}

model Brand{
  id            String   @id @default(uuid()) 
  name          String
  tenantId      String  
  tenant        Tenant @relation(fields: [tenantId], references: [id])
  settings      BrandSettings[]
  furnitureItems FurnitureItem[]

}

model BrandSettings{
  id       String @id @default(uuid()) 
  brandId  String @unique  
  brand    Brand @relation(fields: [brandId], references: [id])
}

model VerificationToken {
  id          String   @id @default(uuid()) 
  identifier  String?  
  email       String?  
  token       String   @unique
  expires     DateTime

  @@unique([identifier, token])
}

model FurnitureItem {
  id       Int      @id @default(autoincrement()) 
  name     String  
  imageName String  
  rooms    Int []  @default([]) 
  letters  String[] @default([])  
  cuft     Int?   
  lbs      Int?   
  search   String?
  tags     String[] @default([])
  packingType  String?
  packingQuantity Int? 
  brandId String  
  brand   Brand  @relation(fields: [brandId], references: [id])
}
